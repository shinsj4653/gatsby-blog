{"version":3,"file":"component---src-pages-index-tsx-925a2afda360df027e0b.js","mappings":"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","sources":["webpack://gatsby-starter-default/./node_modules/decode-uri-component/index.js","webpack://gatsby-starter-default/./node_modules/filter-obj/index.js","webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./src/components/Main/ProfileImage.tsx","webpack://gatsby-starter-default/./src/assets/banner.png","webpack://gatsby-starter-default/./src/components/Main/Introduction.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/SearchBar.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx","webpack://gatsby-starter-default/./node_modules/query-string/index.js","webpack://gatsby-starter-default/./node_modules/split-on-first/index.js","webpack://gatsby-starter-default/./node_modules/strict-uri-encode/index.js"],"sourcesContent":["'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n","'use strict';\nmodule.exports = function (obj, predicate) {\n\tvar ret = {};\n\tvar keys = Object.keys(obj);\n\tvar isArr = Array.isArray(predicate);\n\n\tfor (var i = 0; i < keys.length; i++) {\n\t\tvar key = keys[i];\n\t\tvar val = obj[key];\n\n\t\tif (isArr ? predicate.indexOf(key) !== -1 : predicate(key, val, obj)) {\n\t\t\tret[key] = val;\n\t\t}\n\t}\n\n\treturn ret;\n};\n","import React, { FunctionComponent, ReactNode } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\n\r\ntype CategoryItemProps = {\r\n  active: boolean\r\n}\r\n\r\ntype GatsbyLinkProps = {\r\n  children: ReactNode\r\n  className?: string\r\n  to: string\r\n} & CategoryItemProps\r\n\r\nexport type CategoryListProps = {\r\n  selectedCategory: string\r\n  categoryList: {\r\n    //프로퍼티 이름은 문자열, 프로퍼티 값은 숫자임을 나타내는 타입 표기 방법\r\n    [key: string]: number\r\n  }\r\n}\r\n\r\nconst CategoryListWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 768px;\r\n  margin: 100px auto 0;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    margin-top: 50px;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\r\n  <Link {...props} />\r\n))<CategoryItemProps>`\r\n  margin-right: 20px;\r\n  padding: 5px 0;\r\n  font-size: 18px;\r\n  font-weight: ${({ active }) => (active ? '800' : '400')};\r\n  cursor: pointer;\r\n\r\n  &:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n  @media (max-width: 768px) {\r\n    font-size: 15px;\r\n  }\r\n`\r\n\r\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\r\n  selectedCategory,\r\n  categoryList,\r\n}) {\r\n  return (\r\n    <CategoryListWrapper>\r\n      {Object.entries(categoryList).map(([name, count]) => (\r\n        <CategoryItem\r\n          to={`/?category=${name}`}\r\n          active={name === selectedCategory}\r\n          key={name}\r\n        >\r\n          #{name}({count})\r\n        </CategoryItem>\r\n      ))}\r\n    </CategoryListWrapper>\r\n  )\r\n}\r\n\r\nexport default CategoryList\r\n","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\n\r\ntype ProfileImageProps = {\r\n  profileImage: IGatsbyImageData\r\n}\r\n\r\nconst ProfileImageWrapper = styled(GatsbyImage)`\r\n  width: 120px;\r\n  height: 120px;\r\n  margin-bottom: 30px;\r\n  border-radius: 50%;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n`\r\n\r\nconst ProfileImage: FunctionComponent<ProfileImageProps> = function ({\r\n  profileImage,\r\n}) {\r\n  return <ProfileImageWrapper image={profileImage} alt=\"Profile Image\" />\r\n}\r\n\r\nexport default ProfileImage\r\n","export default __webpack_public_path__ + \"static/banner-efe5d4906e434ad2ade6115e163ec996.png\";","import React, { FunctionComponent } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport ProfileImage from 'components/Main/ProfileImage'\r\nimport backgroundImage from '../../assets/banner.png'\r\nimport { FaGithub } from 'react-icons/fa'\r\nimport { SiNotion } from 'react-icons/si'\r\nimport { SiGmail } from 'react-icons/si'\r\n\r\ntype IntroductionProps = {\r\n  profileImage: IGatsbyImageData\r\n}\r\n// background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);\r\n// const backgroundImage = '../../assets/banner.png'\r\nconst Background = styled.div`\r\n  width: 100%;\r\n  background-image: url(${backgroundImage});\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  color: #fff;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  width: 768px;\r\n  height: 400px;\r\n  margin: 0 auto;\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    height: 300px;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst SubTitle = styled.div`\r\n  font-size: 20px;\r\n  font-weight: 800;\r\n  color: #000;\r\n  @media (max-width: 768px) {\r\n    font-size: 15px;\r\n  }\r\n`\r\n\r\nconst Title = styled.div`\r\n  margin-top: 5px;\r\n  font-size: 35px;\r\n  font-weight: 900;\r\n  color: #000;\r\n  @media (max-width: 768px) {\r\n    font-size: 25px;\r\n  }\r\n  margin-bottom: 20px;\r\n`\r\n\r\nconst goTo = (location: string) => {\r\n  if (location == 'github') {\r\n    window.open('https://github.com/shinsj4653', '_blank')\r\n  } else if (location === 'notion') {\r\n    window.open(\r\n      'https://forested-dive-1ea.notion.site/Welcome-to-my-Notion-Page-0fda5a0b60d94c0bbd0ea579a226fc31',\r\n      '_blank',\r\n    )\r\n  } else if (location === 'gmail') {\r\n    window.open('mailto:shinsj4653@gmail.com', '_blank')\r\n  }\r\n}\r\n\r\nconst Introduction: FunctionComponent<IntroductionProps> = function ({\r\n  profileImage,\r\n}) {\r\n  return (\r\n    <Background>\r\n      <Wrapper>\r\n        <ProfileImage profileImage={profileImage} />\r\n        <div>\r\n          <SubTitle>Nice to Meet You,</SubTitle>\r\n          <Title>I'm an Ardent Engineer Shin.</Title>\r\n        </div>\r\n        <div style={{ display: 'flex' }}>\r\n          <FaGithub\r\n            size=\"30\"\r\n            color=\"black\"\r\n            style={{ cursor: 'pointer', marginRight: '15px' }}\r\n            title=\"Visit Github\"\r\n            onClick={() => {\r\n              goTo('github')\r\n            }}\r\n          />\r\n          <SiNotion\r\n            size=\"30\"\r\n            color=\"black\"\r\n            style={{ cursor: 'pointer', marginRight: '15px' }}\r\n            title=\"Visit Notion\"\r\n            onClick={() => {\r\n              goTo('notion')\r\n            }}\r\n          />\r\n          <SiGmail\r\n            size=\"30\"\r\n            color=\"black\"\r\n            style={{ cursor: 'pointer' }}\r\n            title=\"shinsj4653@gmail.com\"\r\n            onClick={() => {\r\n              goTo('gmail')\r\n            }}\r\n          />\r\n        </div>\r\n      </Wrapper>\r\n    </Background>\r\n  )\r\n}\r\n\r\nexport default Introduction\r\n","import { MutableRefObject, useState, useEffect, useRef, useMemo } from 'react'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\nexport type useInfiniteScrollType = {\r\n  containerRef: MutableRefObject<HTMLDivElement | null>\r\n  postList: PostListItemType[]\r\n}\r\n\r\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\r\n\r\nconst useInfiniteScroll = function (\r\n  selectedCategory: string,\r\n  posts: PostListItemType[],\r\n): useInfiniteScrollType {\r\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\r\n    useRef<HTMLDivElement>(null)\r\n  const observer: MutableRefObject<IntersectionObserver | null> =\r\n    useRef<IntersectionObserver>(null)\r\n  const [count, setCount] = useState<number>(1)\r\n\r\n  const postListByCategory = useMemo<PostListItemType[]>(\r\n    () =>\r\n      posts.filter(\r\n        ({\r\n          node: {\r\n            frontmatter: { categories },\r\n          },\r\n        }: PostListItemType) =>\r\n          selectedCategory !== 'All'\r\n            ? categories.includes(selectedCategory)\r\n            : true,\r\n      ),\r\n    [selectedCategory],\r\n  )\r\n\r\n  useEffect(() => {\r\n    observer.current = new IntersectionObserver((entries, observer) => {\r\n      if (!entries[0].isIntersecting) return\r\n\r\n      setCount(value => value + 1)\r\n      observer.unobserve(entries[0].target)\r\n    })\r\n  }, [])\r\n\r\n  useEffect(() => setCount(1), [selectedCategory])\r\n\r\n  useEffect(() => {\r\n    if (\r\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\r\n      containerRef.current === null ||\r\n      containerRef.current.children.length === 0 ||\r\n      observer.current === null\r\n    )\r\n      return\r\n\r\n    observer.current.observe(\r\n      containerRef.current.children[containerRef.current.children.length - 1],\r\n    )\r\n  }, [count, selectedCategory])\r\n\r\n  return {\r\n    containerRef,\r\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\r\n  }\r\n}\r\n\r\nexport default useInfiniteScroll\r\n","import React from 'react'\r\nimport styled from '@emotion/styled'\r\n\r\nconst SearchInput = styled.input`\r\n  width: 100%;\r\n  padding: 12px 20px;\r\n  margin-bottom: 20px;\r\n  font-size: 16px;\r\n  border: 2px solid #ccc;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n  transition: border-color 0.3s, box-shadow 0.3s;\r\n\r\n  &:focus {\r\n    border-color: #007acc;\r\n    box-shadow: 0 0 5px rgba(0, 122, 204, 0.5);\r\n    outline: none;\r\n  }\r\n`\r\n\r\nconst SearchBar = ({ value, onChange }) => {\r\n  return (\r\n    <SearchInput\r\n      type=\"text\"\r\n      placeholder=\"검색할 내용을 입력하세요.\"\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SearchBar","import React, { FunctionComponent, useMemo, useState, useRef } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport PostItem from 'components/Main/PostItem'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport useInfiniteScroll, {\r\n  useInfiniteScrollType,\r\n} from 'hooks/useInfiniteScroll'\r\nimport SearchBar from 'components/Main/SearchBar'\r\n\r\nexport type PostType = {\r\n  node: {\r\n    id: string\r\n    frontmatter: {\r\n      title: string\r\n      summary: string\r\n      date: string\r\n      categories: string[]\r\n      thumbnail: {\r\n        publicURL: string\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ntype PostListProps = {\r\n  selectedCategory: string\r\n  posts: PostListItemType[]\r\n}\r\n\r\nconst Container = styled.div`\r\n  position: relative;\r\n  max-width: 768px;\r\n  margin: 0 auto;\r\n  padding: 50px 0;\r\n`\r\n\r\nconst SearchBarWrapper = styled.div`\r\n  position: sticky;\r\n  top: 0;\r\n  z-index: 10;\r\n`\r\n\r\nconst PostListWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  grid-gap: 20px;\r\n  margin-top: 20px;\r\n  min-width: 768px;\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n    width: 100%;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst Placeholder = styled.div`\r\n  grid-column: 1 / -1;\r\n  text-align: center;\r\n  padding: 50px 0;\r\n  font-size: 18px;\r\n  color: #888;\r\n`\r\nconst PostList: FunctionComponent<PostListProps> = function ({\r\n  selectedCategory,\r\n  posts,\r\n}) {\r\n\r\n  const [searchKeyword, setSearchKeyword] = useState('')\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\r\n    selectedCategory,\r\n    posts,\r\n  )\r\n\r\n  const handleSearchChange = (event) => {\r\n    const { scrollTop, scrollLeft } = containerRef.current\r\n\r\n    setSearchKeyword(event.target.value)\r\n    requestAnimationFrame(() => {\r\n      containerRef.current.scrollTop = scrollTop\r\n      containerRef.current.scrollLeft = scrollLeft\r\n    })\r\n  }\r\n\r\n  const filteredPosts = useMemo(() => {\r\n    return postList.filter(({ node: { frontmatter } }) => {\r\n      const { title, summary, categories } = frontmatter\r\n      return (\r\n        title.toLowerCase().includes(searchKeyword.toLowerCase()) ||\r\n        summary.toLowerCase().includes(searchKeyword.toLowerCase()) ||\r\n        categories.join('').toLowerCase().includes(searchKeyword.toLowerCase()) ||\r\n        searchTerm.toLowerCase().includes(searchKeyword.toLowerCase()) \r\n        )\r\n    })\r\n  }, [searchKeyword, postList, searchTerm, selectedCategory, posts])\r\n\r\n  return (\r\n    <Container>\r\n      <SearchBarWrapper>\r\n        <SearchBar\r\n          value={searchKeyword}\r\n          onChange={handleSearchChange}\r\n        />\r\n      </SearchBarWrapper>\r\n      <PostListWrapper ref={containerRef}>\r\n        {filteredPosts.length > 0 ? (\r\n          filteredPosts.map(\r\n            ({\r\n              node: {\r\n                id,\r\n                fields: { slug },\r\n                frontmatter,\r\n              },\r\n            }) => (\r\n              <PostItem {...frontmatter} link={slug} key={id} />\r\n            ),\r\n          )\r\n        ) : (\r\n          <Placeholder>검색 결과가 존재하지 않습니다.</Placeholder>\r\n        )}\r\n      </PostListWrapper>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default PostList","import React, { FunctionComponent, useMemo } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport GlobalStyle from 'components/Common/GlobalStyle'\r\nimport Footer from 'components/Common/Footer'\r\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList'\r\nimport Introduction from 'components/Main/Introduction'\r\nimport PostList from 'components/Main/PostList'\r\nimport { graphql } from 'gatsby'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport queryString, { ParsedQuery } from 'query-string'\r\nimport Template from 'components/Common/Template'\r\nimport SearchBar from 'components/Main/SearchBar'\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n`\r\n\r\ntype IndexPageProps = {\r\n  location: {\r\n    search: string\r\n  }\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string\r\n        description: string\r\n        siteUrl: string\r\n      }\r\n    }\r\n    allMarkdownRemark: {\r\n      edges: PostListItemType[]\r\n    }\r\n    file: {\r\n      childImageSharp: {\r\n        gatsbyImageData: IGatsbyImageData\r\n      }\r\n      publicURL: string\r\n    }\r\n  }\r\n}\r\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\r\n  location: { search },\r\n  data: {\r\n    site: {\r\n      siteMetadata: { title, description, siteUrl },\r\n    },\r\n    allMarkdownRemark: { edges },\r\n    file: {\r\n      childImageSharp: { gatsbyImageData },\r\n      publicURL,\r\n    },\r\n  },\r\n}) {\r\n  const parsed: ParsedQuery<string> = queryString.parse(search)\r\n  const selectedCategory: string =\r\n    typeof parsed.category !== 'string' || !parsed.category\r\n      ? 'All'\r\n      : parsed.category\r\n\r\n  const categoryList = useMemo(\r\n    () =>\r\n      edges.reduce(\r\n        (\r\n          list: CategoryListProps['categoryList'],\r\n          {\r\n            node: {\r\n              frontmatter: { categories },\r\n            },\r\n          }: PostListItemType,\r\n        ) => {\r\n          categories.forEach(category => {\r\n            if (list[category] === undefined) list[category] = 1\r\n            else list[category]++\r\n          })\r\n\r\n          list['All']++\r\n\r\n          return list\r\n        },\r\n        { All: 0 },\r\n      ),\r\n    [],\r\n  )\r\n\r\n  return (\r\n    <Template\r\n      title={title}\r\n      description={description}\r\n      url={siteUrl}\r\n      image={publicURL}\r\n    >\r\n      <Introduction profileImage={gatsbyImageData} />\r\n      <CategoryList\r\n        selectedCategory={selectedCategory}\r\n        categoryList={categoryList}\r\n      />\r\n      <PostList selectedCategory={selectedCategory} posts={edges} />\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n\r\nexport const getPostList = graphql`\r\n  query getPostList {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        siteUrl\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData(width: 768, height: 400)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    file(name: { eq: \"profile-image\" }) {\r\n      childImageSharp {\r\n        gatsbyImageData(width: 120, height: 120)\r\n      }\r\n      publicURL\r\n    }\r\n  }\r\n`\r\n","'use strict';\nconst strictUriEncode = require('strict-uri-encode');\nconst decodeComponent = require('decode-uri-component');\nconst splitOnFirst = require('split-on-first');\nconst filterObject = require('filter-obj');\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[', index, ']'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join('')\n\t\t\t\t];\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), '[]'].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '[]=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, [encode(key, options), ':list='].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), ':list=', encode(value, options)].join('')];\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSep = options.arrayFormat === 'bracket-separator' ?\n\t\t\t\t'[]=' :\n\t\t\t\t'=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSep, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault:\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined ||\n\t\t\t\t\t(options.skipNull && value === null) ||\n\t\t\t\t\t(options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [...result, encode(key, options)];\n\t\t\t\t}\n\n\t\t\t\treturn [...result, [encode(key, options), '=', encode(value, options)].join('')];\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'colon-list-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : value === null ? value : decode(value, options);\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\n\t\tcase 'bracket-separator':\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[\\])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null ?\n\t\t\t\t\t[] :\n\t\t\t\t\tvalue.split(options.arrayFormatSeparator).map(item => decode(item, options));\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], arrayValue);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nfunction parseValue(value, options) {\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\tvalue = Number(value);\n\t} else if (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\tvalue = value.toLowerCase() === 'true';\n\t}\n\n\treturn value;\n}\n\nfunction parse(query, options) {\n\toptions = Object.assign({\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst ret = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn ret;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn ret;\n\t}\n\n\tfor (const param of query.split('&')) {\n\t\tif (param === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet [key, value] = splitOnFirst(options.decode ? param.replace(/\\+/g, ' ') : param, '=');\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : ['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options);\n\t\tformatter(decode(key, options), value, ret);\n\t}\n\n\tfor (const key of Object.keys(ret)) {\n\t\tconst value = ret[key];\n\t\tif (typeof value === 'object' && value !== null) {\n\t\t\tfor (const k of Object.keys(value)) {\n\t\t\t\tvalue[k] = parseValue(value[k], options);\n\t\t\t}\n\t\t} else {\n\t\t\tret[key] = parseValue(value, options);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn ret;\n\t}\n\n\treturn (options.sort === true ? Object.keys(ret).sort() : Object.keys(ret).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = ret[key];\n\t\tif (Boolean(value) && typeof value === 'object' && !Array.isArray(value)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(value);\n\t\t} else {\n\t\t\tresult[key] = value;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = (object, options) => {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ','\n\t}, options);\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key])) ||\n\t\t(options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const key of Object.keys(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = object[key];\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n};\n\nexports.parseUrl = (url, options) => {\n\toptions = Object.assign({\n\t\tdecode: true\n\t}, options);\n\n\tconst [url_, hash] = splitOnFirst(url, '#');\n\n\treturn Object.assign(\n\t\t{\n\t\t\turl: url_.split('?')[0] || '',\n\t\t\tquery: parse(extract(url), options)\n\t\t},\n\t\toptions && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}\n\t);\n};\n\nexports.stringifyUrl = (object, options) => {\n\toptions = Object.assign({\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true\n\t}, options);\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = exports.extract(object.url);\n\tconst parsedQueryFromUrl = exports.parse(queryFromUrl, {sort: false});\n\n\tconst query = Object.assign(parsedQueryFromUrl, object.query);\n\tlet queryString = exports.stringify(query, options);\n\tif (queryString) {\n\t\tqueryString = `?${queryString}`;\n\t}\n\n\tlet hash = getHash(object.url);\n\tif (object.fragmentIdentifier) {\n\t\thash = `#${options[encodeFragmentIdentifier] ? encode(object.fragmentIdentifier, options) : object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n};\n\nexports.pick = (input, filter, options) => {\n\toptions = Object.assign({\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false\n\t}, options);\n\n\tconst {url, query, fragmentIdentifier} = exports.parseUrl(input, options);\n\treturn exports.stringifyUrl({\n\t\turl,\n\t\tquery: filterObject(query, filter),\n\t\tfragmentIdentifier\n\t}, options);\n};\n\nexports.exclude = (input, filter, options) => {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn exports.pick(input, exclusionFilter, options);\n};\n","'use strict';\n\nmodule.exports = (string, separator) => {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (separator === '') {\n\t\treturn [string];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [string];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n};\n","'use strict';\nmodule.exports = str => encodeURIComponent(str).replace(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n"],"names":["token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","err","length","left","slice","right","Array","prototype","concat","call","decode","input","tokens","match","i","module","exports","encodedURI","TypeError","replace","replaceMap","exec","result","entries","Object","keys","key","customDecodeURIComponent","obj","predicate","ret","isArr","isArray","val","indexOf","CategoryListWrapper","CategoryItem","_styled","_ref","active","props","___EmotionJSX","Link","_ref2","selectedCategory","categoryList","_ref3","map","_ref4","name","count","to","ProfileImageWrapper","GatsbyImage","process","profileImage","image","alt","Background","backgroundImage","Wrapper","SubTitle","Title","goTo","location","window","open","ProfileImage","style","display","FaGithub","size","color","cursor","marginRight","title","onClick","SiNotion","SiGmail","posts","containerRef","useRef","observer","setCount","useState","postListByCategory","useMemo","filter","node","frontmatter","categories","includes","useEffect","current","IntersectionObserver","isIntersecting","value","unobserve","target","children","observe","postList","SearchInput","onChange","type","placeholder","Container","SearchBarWrapper","PostListWrapper","Placeholder","searchKeyword","setSearchKeyword","searchTerm","setSearchTerm","useInfiniteScroll","filteredPosts","summary","toLowerCase","SearchBar","event","scrollTop","scrollLeft","requestAnimationFrame","ref","id","fields","slug","PostItem","link","search","data","site","siteMetadata","description","siteUrl","allMarkdownRemark","edges","file","childImageSharp","gatsbyImageData","publicURL","parsed","queryString","category","reduce","list","forEach","undefined","All","Template","url","Introduction","CategoryList","PostList","strictUriEncode","decodeComponent","splitOnFirst","filterObject","encodeFragmentIdentifier","Symbol","validateArrayFormatSeparator","encode","options","strict","encodeURIComponent","keysSorter","sort","a","b","Number","removeHash","hashStart","extract","queryStart","parseValue","parseNumbers","isNaN","trim","parseBooleans","parse","query","assign","arrayFormat","arrayFormatSeparator","formatter","accumulator","isEncodedArray","newValue","item","test","arrayValue","parserForArrayFormat","create","param","k","Boolean","stringify","object","shouldFilter","skipNull","skipEmptyString","index","keyValueSep","encoderForArrayFormat","objectCopy","x","parseUrl","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryFromUrl","parsedQueryFromUrl","getHash","pick","exclude","exclusionFilter","string","separator","separatorIndex","str","charCodeAt","toString","toUpperCase"],"sourceRoot":""}